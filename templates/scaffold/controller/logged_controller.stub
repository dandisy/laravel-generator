<?php

namespace $NAMESPACE_CONTROLLER$;

use $NAMESPACE_REQUEST$\Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\Update$MODEL_NAME$Request;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use Illuminate\Http\Request;
use Flash;
use Prettus\Repository\Criteria\RequestCriteria;
use Response;
use Illuminate\Support\Facades\Auth; // added by dandisy
use Illuminate\Support\Facades\Storage; // added by dandisy
use Maatwebsite\Excel\Facades\Excel; // added by dandisy

class $MODEL_NAME$Controller extends AppBaseController
{
    /** @var  $MODEL_NAME$Repository */
    private $$MODEL_NAME_CAMEL$Repository;

    public function __construct($MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repo)
    {
        $this->middleware('auth');
        $this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repo;
    }

    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @param Request $request
     * @return Response
     */
    public function index(Request $request)
    {
        $this->$MODEL_NAME_CAMEL$Repository->pushCriteria(new RequestCriteria($request));
        $$MODEL_NAME_PLURAL_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->$RENDER_TYPE$;

        // $ch = curl_init();
        // curl_setopt($ch, CURLOPT_URL, env('SERVICE_BASE_URL').'/api/elorest/Models/$MODEL_NAME$');
        // curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        // curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        //     // "Authorization: bearer " . session('api_key'),
        //     // "cache-control: no-cache",
        //     // "Content-Type:application/x-www-form-urlencoded;charset=UTF-8",
        //     "Content-Type:application/json;charset=UTF-8",
        //     "Accept-Charset:UTF-8"
        // ));
        // $result = curl_exec($ch);
        // curl_close($ch);
        // $$MODEL_NAME_PLURAL_CAMEL$ = json_decode($result)->data;

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index')
            ->with('$MODEL_NAME_PLURAL_CAMEL$', $$MODEL_NAME_PLURAL_CAMEL$);
    }

    /**
     * Show the form for creating a new $MODEL_NAME$.
     *
     * @return Response
     */
    public function create()
    {
        // added by dandisy
        $RELATION_QUERY$$COMPONENT_QUERY$$THEME_QUERY$$MODEL_QUERY$

        // edited by dandisy
        // return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.create');
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.create')$RELATION_VIEW$$COMPONENT_VIEW$$THEME_VIEW$$MODEL_VIEW$;
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Create$MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function store(Create$MODEL_NAME$Request $request)
    {
        $input = $request->all();

        $input['created_by'] = Auth::user()->id;
        $input['updated_by'] = Auth::user()->id;

        $input = $request->all();

        // // $savePath = env('SAVE_PATH'); // SAVE_PATH=./app/public/uploads/
        // $savePath = './app/public/uploads/';
        // $dir = str_replace('./','',$savePath).Auth::user()->id;
        // $dir = str_replace('/',DIRECTORY_SEPARATOR,$dir);
        // if (!storage_path($dir)) {
        //     mkdir(storage_path($dir), 0777, true);
        // }
        // $model = '$MODEL_NAME$';
        // if($request->hasFile('file')) {
        //     $extension = $request->file('file')->extension();
        //     $name = Auth::user()->id.'_'.$model.'_'.time().'.'.$extension;
        //     $path = $dir.DIRECTORY_SEPARATOR.$name;
        //     if (realpath(storage_path($path))) {
        //         Flash::error('File already exist.');
        //     }
        //     $file = $request->file('file');
        //     $file->move(storage_path($dir), $name);
        //     $imagePath = str_replace('app'.DIRECTORY_SEPARATOR.'public'.DIRECTORY_SEPARATOR,'',$path);
        //     $input['file'] = url('/storage').'/'.str_replace(DIRECTORY_SEPARATOR,'/',$imagePath);
        // } else {
        //     if(base64_decode($request->file, true) !== false) {
        //         $extension = explode('/', mime_content_type($request->file))[1];
        //         $name = Auth::user()->id.'_'.$model.'_'.time().'.'.$extension;
        //         $path = $dir.DIRECTORY_SEPARATOR.$name;
        //         file_put_contents(str_replace('public'.DIRECTORY_SEPARATOR,'',$path),base64_decode($request->file));
        //     }
        //     $imagePath = str_replace('app'.DIRECTORY_SEPARATOR.'public'.DIRECTORY_SEPARATOR,'',$path);
        //     $input['file'] = url('/storage').'/'.str_replace(DIRECTORY_SEPARATOR,'/',$imagePath);
        // }

        // if($request->hasFile('file')) {
        //     $tmpfile = $_FILES['file']['tmp_name'];
        //     // $filename = basename($_FILES['file']['name']);
        //     if(function_exists('curl_file_create')) {
        //         $fileData = curl_file_create($tmpfile);
        //     } else {
        //         $fileData = '@'.realpath($tmpfile);
        //     }
        //     $ch = curl_init();
        //     curl_setopt($ch, CURLOPT_URL, env('SERVICE_BASE_URL').'/api/upload/'.Auth::user()->id.'/$MODEL_NAME$');
        //     curl_setopt($ch, CURLOPT_POST, 1);
        //     curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        //     curl_setopt($ch, CURLOPT_POSTFIELDS, array('file' => $fileData));
        //     $result = curl_exec($ch);
        //     curl_close($ch);
        //     $input['file'] = json_decode($result)->data;
        // }

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->create($input);

        // $ch = curl_init();
        // curl_setopt($ch, CURLOPT_URL, env('SERVICE_BASE_URL').'/api/elorest/Models/$MODEL_NAME$');
        // curl_setopt($ch, CURLOPT_POST, 1);
        // curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        // curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($input);
        // curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        //     // "Authorization: bearer " . session('api_key'),
        //     // "cache-control: no-cache",
        //     // "Content-Type:application/x-www-form-urlencoded;charset=UTF-8",
        //     "Content-Type:application/json;charset=UTF-8",
        //     "Accept-Charset:UTF-8"
        // ));
        // $result = curl_exec($ch);
        // curl_close($ch);
        // $$MODEL_NAME_CAMEL$ = json_decode($result)->data;

        Flash::success('$MODEL_NAME_HUMAN$ saved successfully.');

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function show($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        // $ch = curl_init();
        // curl_setopt($ch, CURLOPT_URL, env('SERVICE_BASE_URL').'/api/elorest/Models/$MODEL_NAME$/'.$id);
        // curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        // curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        //     // "Authorization: bearer " . session('api_key'),
        //     // "cache-control: no-cache",
        //     // "Content-Type:application/x-www-form-urlencoded;charset=UTF-8",
        //     "Content-Type:application/json;charset=UTF-8",
        //     "Accept-Charset:UTF-8"
        // ));
        // $result = curl_exec($ch);
        // curl_close($ch);
        // $$MODEL_NAME_CAMEL$ = json_decode($result)->data;

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.show')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    /**
     * Show the form for editing the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function edit($id)
    {
        // added by dandisy
        $RELATION_QUERY$$COMPONENT_QUERY$$THEME_QUERY$$MODEL_QUERY$

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        // $ch = curl_init();
        // curl_setopt($ch, CURLOPT_URL, env('SERVICE_BASE_URL').'/api/elorest/Models/$MODEL_NAME$/'.$id);
        // curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        // curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        //     // "Authorization: bearer " . session('api_key'),
        //     // "cache-control: no-cache",
        //     // "Content-Type:application/x-www-form-urlencoded;charset=UTF-8",
        //     "Content-Type:application/json;charset=UTF-8",
        //     "Accept-Charset:UTF-8"
        // ));
        // $result = curl_exec($ch);
        // curl_close($ch);
        // $$MODEL_NAME_CAMEL$ = json_decode($result)->data;

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        // edited by dandisy
        // return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.edit')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.edit')
            ->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$)$RELATION_VIEW$$COMPONENT_VIEW$$THEME_VIEW$$MODEL_VIEW$;        
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param  int              $id
     * @param Update$MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function update($id, Update$MODEL_NAME$Request $request)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }
        
        $input = $request->all();
        $input['updated_by'] = Auth::user()->id;

        // // $savePath = env('SAVE_PATH'); // SAVE_PATH=./app/public/uploads/
        // $savePath = './app/public/uploads/';
        // $dir = str_replace('./','',$savePath).Auth::user()->id;
        // $dir = str_replace('/',DIRECTORY_SEPARATOR,$dir);
        // if (!storage_path($dir)) {
        //     mkdir(storage_path($dir), 0777, true);
        // }
        // $model = '$MODEL_NAME$';
        // if($request->hasFile('file')) {
        //     $extension = $request->file('file')->extension();
        //     $name = Auth::user()->id.'_'.$model.'_'.time().'.'.$extension;
        //     $path = $dir.DIRECTORY_SEPARATOR.$name;
        //     if (realpath(storage_path($path))) {
        //         Flash::error('File already exist.');
        //     }
        //     $file = $request->file('file');
        //     $file->move(storage_path($dir), $name);
        //     $imagePath = str_replace('app'.DIRECTORY_SEPARATOR.'public'.DIRECTORY_SEPARATOR,'',$path);
        //     $input['file'] = url('/storage').'/'.str_replace(DIRECTORY_SEPARATOR,'/',$imagePath);
        // } else {
        //     if(base64_decode($request->file, true) !== false) {
        //         $extension = explode('/', mime_content_type($request->file))[1];
        //         $name = Auth::user()->id.'_'.$model.'_'.time().'.'.$extension;
        //         $path = $dir.DIRECTORY_SEPARATOR.$name;
        //         file_put_contents(str_replace('public'.DIRECTORY_SEPARATOR,'',$path),base64_decode($request->file));
        //     }
        //     $imagePath = str_replace('app'.DIRECTORY_SEPARATOR.'public'.DIRECTORY_SEPARATOR,'',$path);
        //     $input['file'] = url('/storage').'/'.str_replace(DIRECTORY_SEPARATOR,'/',$imagePath);
        // }

        // if($request->hasFile('file')) {
        //     $tmpfile = $_FILES['file']['tmp_name'];
        //     // $filename = basename($_FILES['file']['name']);
        //     if(function_exists('curl_file_create')) {
        //         $fileData = curl_file_create($tmpfile);
        //     } else {
        //         $fileData = '@'.realpath($tmpfile);
        //     }
        //     $ch = curl_init();
        //     curl_setopt($ch, CURLOPT_URL, env('SERVICE_BASE_URL').'/api/upload/'.Auth::user()->id.'/$MODEL_NAME$');
        //     curl_setopt($ch, CURLOPT_POST, 1);
        //     curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        //     curl_setopt($ch, CURLOPT_POSTFIELDS, array('file' => $fileData));
        //     $result = curl_exec($ch);
        //     curl_close($ch);
        //     $input['file'] = json_decode($result)->data;
        // }

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->update($input, $id);

        // $ch = curl_init();
        // curl_setopt($ch, CURLOPT_URL, env('SERVICE_BASE_URL').'/api/elorest/Models/$MODEL_NAME$/'.$id);
        // curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");
        // curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        // curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($request->all());
        // curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        //     // "Authorization: bearer " . session('api_key'),
        //     // "cache-control: no-cache",
        //     // "Content-Type:application/x-www-form-urlencoded;charset=UTF-8",
        //     "Content-Type:application/json;charset=UTF-8",
        //     "Accept-Charset:UTF-8"
        // ));
        // $result = curl_exec($ch);
        // curl_close($ch);
        // $$MODEL_NAME_CAMEL$ = json_decode($result)->data;

        Flash::success('$MODEL_NAME_HUMAN$ updated successfully.');

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function destroy($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        $this->$MODEL_NAME_CAMEL$Repository->delete($id);

        // $ch = curl_init();
        // curl_setopt($ch, CURLOPT_URL, env('SERVICE_BASE_URL').'/api/elorest/Models/$MODEL_NAME$/'.$id);
        // curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "DELETE");
        // curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        // curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        //     // "Authorization: bearer " . session('api_key'),
        //     // "cache-control: no-cache",
        //     // "Content-Type:application/x-www-form-urlencoded;charset=UTF-8",
        //     "Content-Type:application/json;charset=UTF-8",
        //     "Accept-Charset:UTF-8"
        // ));
        // $result = curl_exec($ch);
        // curl_close($ch);
        // $$MODEL_NAME_CAMEL$ = json_decode($result)->data;

        Flash::success('$MODEL_NAME_HUMAN$ deleted successfully.');

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    /**
     * Store data $MODEL_NAME$ from an excel file in storage.
     *
     * @param Request $request
     *
     * @return Response
     */
    public function import(Request $request)
    {
        Excel::load($request->file('file'), function($reader) {
            $reader->each(function ($item) {
                $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->create($item->toArray());

                // $ch = curl_init();
                // curl_setopt($ch, CURLOPT_URL, env('SERVICE_BASE_URL').'/api/elorest/Models/'.$this->$MODEL_NAME_CAMEL$);
                // curl_setopt($ch, CURLOPT_POST, 1);
                // curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                // curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($item->toArray());
                // curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                //     // "Authorization: bearer " . session('api_key'),
                //     // "cache-control: no-cache",
                //     // "Content-Type:application/x-www-form-urlencoded;charset=UTF-8",
                //     "Content-Type:application/json;charset=UTF-8",
                //     "Accept-Charset:UTF-8"
                // ));
                // $result = curl_exec($ch);
                // curl_close($ch);
                // $$MODEL_NAME_CAMEL$ = json_decode($result)->data;
            });
        });

        Flash::success('$MODEL_NAME_HUMAN$ saved successfully.');

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }
}
